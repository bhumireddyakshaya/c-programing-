#include <stdio.h>

#define V 4

int graph[V][V] = {
    {0, 1, 0, 1},
    {1, 0, 1, 1},
    {0, 1, 0, 1},
    {1, 1, 1, 0}
};

void printPath(int path[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", path[i]);
    }
    printf("\n");
}

int isSafe(int v, int graph[V][V], int path[], int pos) {
    if (graph[path[pos - 1]][v] == 0) {
        return 0;
    }

    for (int i = 0; i < pos; i++) {
        if (path[i] == v) {
            return 0;
        }
    }

    return 1;
}

int findPathUtil(int graph[V][V], int path[], int pos) {
    if (pos == V) {
        if (graph[path[pos - 1]][path[0]] == 1) {
            return 1;
        } else {
            return 0;
        }
    }

    for (int v = 1; v < V; v++) {
        if (isSafe(v, graph, path, pos)) {
            path[pos] = v;
            if (findPathUtil(graph, path, pos + 1) == 1) {
                return 1;
            }
            path[pos] = -1;
        }
    }

    return 0;
}

int findPath(int graph[V][V]) {
    int path[V];
    for (int i = 0; i < V; i++) {
        path[i] = -1;
    }

    path[0] = 0;

    if (findPathUtil(graph, path, 1) == 0) {
        printf("Solution does not exist\n");
        return 0;
    }

    printPath(path, V);
    return 1;
}

int main() {
    findPath(graph);
    return 0;
}
